from PIL import Image

def encrypt_image(image_path):
    # Open the image
    img = Image.open(image_path)
    
    # Get the size of the image
    width, height = img.size
    
    # Encrypt the image by swapping pixel values
    for y in range(height):
        for x in range(width):
            r, g, b = img.getpixel((x, y))
            img.putpixel((x, y), (b, r, g))
    
    # Save the encrypted image
    encrypted_path = image_path.split('.')[0] + "_encrypted.png"
    img.save(encrypted_path)
    print("Image encrypted successfully!")
    return encrypted_path

def decrypt_image(encrypted_path):
    # Open the encrypted image
    img = Image.open(encrypted_path)
    
    # Get the size of the image
    width, height = img.size
    
    # Decrypt the image by swapping pixel values
    for y in range(height):
        for x in range(width):
            b, r, g = img.getpixel((x, y))
            img.putpixel((x, y), (r, g, b))
    
    # Save the decrypted image
    decrypted_path = encrypted_path.split('_encrypted')[0] + "_decrypted.png"
    img.save(decrypted_path)
    print("Image decrypted successfully!")
    return decrypted_path

def main():
    while True:
        print("Choose an option:")
        print("1. Encrypt Image")
        print("2. Decrypt Image")
        print("3. Exit")
        choice = input("Enter your choice (1/2/3): ")

        if choice == '1':
            image_path = input("Enter the path to the image to encrypt: ")
            encrypted_image_path = encrypt_image(image_path)
            print("Encrypted image saved at:", encrypted_image_path)
        elif choice == '2':
            encrypted_path = input("Enter the path to the encrypted image to decrypt: ")
            decrypted_image_path = decrypt_image(encrypted_path)
            print("Decrypted image saved at:", decrypted_image_path)
        elif choice == '3':
            print("Exiting program.")
            break
        else:
            print("Invalid choice. Please choose 1, 2, or 3.")

if __name__ == "__main__":
    main()
